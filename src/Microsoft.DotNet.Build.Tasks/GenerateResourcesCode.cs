// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml.Linq;
using System.Text;

namespace Microsoft.DotNet.Build.Tasks
{
    public class GenerateResourcesCode : BuildTask
    {
        private TargetLanguage _targetLanguage = TargetLanguage.CSharp;
        private StreamWriter _targetStream;
        private String _resourcesName;

        [Required]
        public string ResxFilePath { get; set; }

        [Required]
        public string OutputSourceFilePath { get; set; }

        [Required]
        public string AssemblyName { get; set; }

        /// <summary>
        /// Emit constant strings instead of properties.
        /// </summary>
        public bool AsConstants { get; set; }

        public override bool Execute()
        {
            try
            {
                _resourcesName = "FxResources." + AssemblyName;

                using (_targetStream = File.CreateText(OutputSourceFilePath))
                {
                    if (String.Equals(Path.GetExtension(OutputSourceFilePath), ".vb", StringComparison.OrdinalIgnoreCase))
                    {
                        _targetLanguage = TargetLanguage.VB;
                    }
                    WriteClassHeader();
					WriteResources();
					WriteGetTypeProperty();
					WriteClassEnd();
					WriteResourceTypeClass();
                }
            }
            catch (Exception e)
            {
                Log.LogError("Failed to generate the resource code with error:\n" + e.Message);
                return false; // fail the task
            }

            return true;
        }

        private void WriteClassHeader()
        {
            string commentPrefix = _targetLanguage == TargetLanguage.CSharp ? "// " : "' ";
            _targetStream.WriteLine(commentPrefix + "Do not edit this file manually it is auto-generated during the build based on the .resx file for this project.");

            if (_targetLanguage == TargetLanguage.CSharp)
            {
                _targetStream.WriteLine("namespace System");
                _targetStream.WriteLine("{");


                _targetStream.WriteLine("    internal static partial class SR");
                _targetStream.WriteLine("    {");

                _targetStream.WriteLine("#pragma warning disable 0414");
                _targetStream.WriteLine($"        private const string s_resourcesName = \"{_resourcesName}.SR\";");
                _targetStream.WriteLine("#pragma warning restore 0414");
                _targetStream.WriteLine("");
            }
            else
            {
                _targetStream.WriteLine("Namespace System");

                _targetStream.WriteLine("    Friend Partial Class SR");
                _targetStream.WriteLine("    ");

                _targetStream.WriteLine($"        Private Const s_resourcesName As String = \"{_resourcesName}.SR\"");
                _targetStream.WriteLine("");
            }
        }

        private void WriteResources()
        {
            var resources = GetResources(ResxFilePath);

            if (AsConstants)
            {
                foreach (var resourcePair in resources)
                {
                    WriteResourceConstant((string)resourcePair.Key);
                }
            }
            else
            {
                _targetStream.WriteLine(_targetLanguage == TargetLanguage.CSharp ?
                    "#if !DEBUGRESOURCES" :
                    "#If Not DEBUGRESOURCES Then");

                foreach (var resourcePair in resources)
                {
                    WriteResourceProperty(resourcePair.Key, _targetLanguage == TargetLanguage.CSharp ?
                        "null" :
                        "Nothing");
                }

                _targetStream.WriteLine(_targetLanguage == TargetLanguage.CSharp ?
                    "#else" :
                    "#Else");

                foreach (var resourcePair in resources)
                {
                    WriteResourceProperty(resourcePair.Key, CreateStringLiteral(resourcePair.Value));
                }

                _targetStream.WriteLine(_targetLanguage == TargetLanguage.CSharp ?
                    "#endif" :
                    "#End If");
            }
        }

        private string CreateStringLiteral(string original)
        {
            StringBuilder stringLiteral = new StringBuilder(original.Length + 3);
            if (_targetLanguage == TargetLanguage.CSharp)
            {
                stringLiteral.Append('@');
            }
            stringLiteral.Append('\"');
            for (var i = 0; i < original.Length; i++)
            {
                // duplicate '"' for VB and C#
                if (original[i] == '\"' && (_targetLanguage == TargetLanguage.VB || _targetLanguage == TargetLanguage.CSharp))
                {
                    stringLiteral.Append("\"");
                }
                stringLiteral.Append(original[i]);
            }
            stringLiteral.Append('\"');

            return stringLiteral.ToString();
        }

        private void WriteResourceProperty(string resourceId, string resourceValueLiteral)
        {
            if (_targetLanguage == TargetLanguage.CSharp)
            {
                _targetStream.WriteLine($"        internal static string {resourceId} {{");
                _targetStream.WriteLine($"            get {{ return SR.GetResourceString(\"{resourceId}\", {resourceValueLiteral}); }}");
                _targetStream.WriteLine($"        }}");
            }
            else
            {
                _targetStream.WriteLine($"        Friend Shared ReadOnly Property {resourceId} As String");
                _targetStream.WriteLine($"           Get");
                _targetStream.WriteLine($"               Return SR.GetResourceString(\"{resourceId}\", {resourceValueLiteral})");
                _targetStream.WriteLine($"           End Get");
                _targetStream.WriteLine($"        End Property");
            }
        }
        private void WriteResourceConstant(string resourceId)
        {
            if (_targetLanguage == TargetLanguage.CSharp)
            {
                _targetStream.WriteLine($"        internal const string {resourceId} = \"{resourceId}\";");
            }
            else
            {
                _targetStream.WriteLine($"        Friend Const {resourceId} As String = \"{resourceId}\"");
            }
        }

        private void WriteGetTypeProperty()
        {
            if (_targetLanguage == TargetLanguage.CSharp)
            {
                _targetStream.WriteLine($"        internal static Type ResourceType {{");
                _targetStream.WriteLine($"            get {{ return typeof({_resourcesName}.SR); }}");
                _targetStream.WriteLine($"        }}");
            }
            else
            {
                _targetStream.WriteLine($"        Friend Shared ReadOnly Property ResourceType As Type");
                _targetStream.WriteLine($"            Get");
                _targetStream.WriteLine($"                Return GetType({_resourcesName}.SR)");
                _targetStream.WriteLine($"            End Get");
                _targetStream.WriteLine($"        End Property");
            }
        }

        private void WriteClassEnd()
        {
            if (_targetLanguage == TargetLanguage.CSharp)
            {
                _targetStream.WriteLine("    }");
                _targetStream.WriteLine("}");
            }
            else
            {
                _targetStream.WriteLine("    End Class");
                _targetStream.WriteLine("End Namespace");
            }
        }

        private void WriteResourceTypeClass()
        {
            if (_targetLanguage == TargetLanguage.CSharp)
            {
                _targetStream.WriteLine($"namespace {_resourcesName}");
                _targetStream.WriteLine("{");
                _targetStream.WriteLine("    // The type of this class is used to create the ResourceManager instance as the type name matches the name of the embedded resources file");
                _targetStream.WriteLine("    internal static class SR");
                _targetStream.WriteLine("    {");
                _targetStream.WriteLine("    }");
                _targetStream.WriteLine("}");
            }
            else
            {
                _targetStream.WriteLine($"Namespace {_resourcesName}");
                _targetStream.WriteLine("    ' The type of this class is used to create the ResourceManager instance as the type name matches the name of the embedded resources file");
                _targetStream.WriteLine("    Friend Class SR");
                _targetStream.WriteLine("    ");
                _targetStream.WriteLine("    End Class");
                _targetStream.WriteLine("End Namespace");
            }
        }
        
        private enum TargetLanguage
        {
            CSharp, VB
        }

        internal Dictionary<string, string> GetResources(string fileName)
        {
            Dictionary<string, string> resources = new Dictionary<string, string>();

            XDocument doc = XDocument.Load(fileName, LoadOptions.PreserveWhitespace);
            foreach (XElement dataElem in doc.Element("root").Elements("data"))
            {
                string name = dataElem.Attribute("name").Value;
                string value = dataElem.Element("value").Value;
                if (resources.ContainsKey(name))
                {
                    Log.LogError($"Duplicate resource id \"{name}\"");
                }
                else
                {
                    resources[name] = value;
                }
            }

            return resources;
        }
    }
}
