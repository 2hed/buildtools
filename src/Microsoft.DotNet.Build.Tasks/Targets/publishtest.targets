<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask TaskName="ResolveNuGetPackages" AssemblyFile="$(ToolsDir)Microsoft.DotNet.Build.Tasks.dll"/>
  <UsingTask TaskName="ResolveNuGetPackageAssets" AssemblyFile="$(ToolsDir)Microsoft.DotNet.Build.Tasks.dll"/>
  
  <PropertyGroup>
    <TestRuntimePackageConfig>$(MSBuildThisFileDirectory)test-runtime\packages.config</TestRuntimePackageConfig>
    <TestRuntimePackageSemaphore>$(PackagesDir)test-runtime-packages.config</TestRuntimePackageSemaphore>
    <TestRuntimeProjectJson>$(MSBuildThisFileDirectory)test-runtime\project.json</TestRuntimeProjectJson>
    <TestRuntimeProjectLockJson>$(PackagesDir)test-runtime-project.lock.json</TestRuntimeProjectLockJson>
    <SerializeProjects Condition="'$(TestWithLocalLibraries)'=='true'">true</SerializeProjects>
  </PropertyGroup>

  <Target Name="RestoreTestRuntimePackage"
          BeforeTargets="ResolveNuGetPackages"
          Inputs="$(TestRuntimePackageConfig);$(TestRuntimeProjectJson)"
          Outputs="$(TestRuntimePackageSemaphore);$(TestRuntimeProjectLockJson)"
          Condition="'$(IsTestProject)' == 'true'">

    <Exec Command="$(NugetRestoreCommand) &quot;$(TestRuntimePackageConfig)&quot;" StandardOutputImportance="Low" />

    <!-- DNU will emit a project.lock.json.  When multiple tests are building for the first time they may race on 
         running this target and generating the lock.json.  This is causing IOExceptions in dnu for writing lock.json.
         We should really be handling these test dependencies in a different way (as a package themselves) but for now
         just restore the project.json from intermediate to avoid the race.  -->
    <Copy SourceFiles="$(TestRuntimeProjectJson)" DestinationFolder="$(IntermediateOutputPath)">
      <Output TaskParameter="CopiedFiles" PropertyName="TempTestRuntimeProjectJson"/>
    </Copy>
    <Exec Command="$(DnuRestoreCommand) &quot;$(TempTestRuntimeProjectJson)&quot;" StandardOutputImportance="Low" CustomErrorRegularExpression="^Unable to locate .*" />

    <!-- Always copy since we need to force a timestamp update for inputs/outputs-->
    <Copy SourceFiles="$(TestRuntimePackageConfig)" DestinationFiles="$(TestRuntimePackageSemaphore)" ContinueOnError="true" SkipUnchangedFiles="false" />
    <Copy SourceFiles="$(IntermediateOutputPath)/project.lock.json" DestinationFiles="$(TestRuntimeProjectLockJson)" ContinueOnError="true" SkipUnchangedFiles="false" />
  </Target>

  <Target Name="GetTestNugetPackageReferences"
          DependsOnTargets="RestorePackages;RestoreTestRuntimePackage">
    <ReadNuGetPackageReferences ProjectLockJsonFile="$(TestRuntimeProjectLockJson)"
                                TargetFrameworkMonikers="@(TestTargetFramework)" 
                                Condition="Exists($(TestRuntimeProjectLockJson))">
      <Output TaskParameter="NuGetPackageReferences" ItemName="TestNuGetPackageReference" />
    </ReadNuGetPackageReferences>

    <!-- Re-evaluate the project's package dependencies since TestTargetFramework may be 
         different than NugetTargetFramework -->
    <ReadNuGetPackageReferences ProjectLockJsonFile="$(RestoreProjectLockJson)"
                                TargetFrameworkMonikers="@(TestTargetFramework)" 
                                Condition="Exists($(RestoreProjectLockJson))">
      <Output TaskParameter="NuGetPackageReferences" ItemName="TestNuGetPackageReference" />
    </ReadNuGetPackageReferences>
  </Target>

  <PropertyGroup>
    <CopyTestToTestDirectory Condition="'$(CopyTestToTestDirectory)'==''">$(IsTestProject)</CopyTestToTestDirectory>
  </PropertyGroup>

  <Target Name="CopyTestToTestDirectory"
          DependsOnTargets="GetTestNugetPackageReferences"
          Condition="'$(CopyTestToTestDirectory)'=='true'">

    <ResolveNuGetPackages PackagesConfigs="@(PackagesConfigs)"
                          PackageRoot="$(PackagesDir)"
                          Platform="$(PlatformTarget)"
                          Configuration="$(NuGetConfiguration)"
                          Language="$(Language)"
                          TargetFramework="%(TestTargetFramework.Identity)"
                          TargetPlatformMoniker="$(TargetPlatformMoniker)">

      <Output TaskParameter="ResolvedCopyLocal" ItemName="TestCopyLocal" />
    </ResolveNuGetPackages>

    <ResolveNuGetPackageAssets Condition="'@(TestNuGetPackageReference)' != ''"
                               Architecture="$(PlatformTarget)"
                               Configuration="$(NuGetConfiguration)"
                               Language="$(Language)"
                               NuGetPackageReferences="@(TestNuGetPackageReference)"
                               PackageRoot="$(PackagesDir)"
                               ProjectFile="$(MSBuildProjectFullPath)"
                               TargetFrameworkMonikers="@(TestTargetFramework)"
                               TargetPlatformMonikers="$(TargetPlatformMoniker)">

      <Output TaskParameter="ResolvedCopyLocalItems" ItemName="TestCopyLocal" />
    </ResolveNuGetPackageAssets>

    <!-- We may have an indirect package reference that we want to replace with a project reference -->
    <ItemGroup>
      <!-- Convert to filenames so that we can intersect -->
      <_ProjectReferenceFilenames Include="@(_ResolvedProjectReferencePaths->'%(FileName)%(Extension)')">
        <OriginalIdentity>%(Identity)</OriginalIdentity>
      </_ProjectReferenceFilenames>

      <_TestCopyLocalFileNames Include="@(Reference->'%(FileName)%(Extension)')">
        <OriginalIdentity>%(Identity)</OriginalIdentity>
      </_TestCopyLocalFileNames>

      <!-- Intersect project-refs with package-refs -->
      <_TestCopyLocalFileNamesToRemove Include="@(_TestCopyLocalFileNames->'%(OriginalIdentity)')" Condition="'@(_ProjectReferenceFilenames)' == '@(_TestCopyLocalFileNames)' and '%(Identity)' != ''"/>

      <TestCopyLocal Remove="@(_TestCopyLocalFileNamesToRemove)" />
    </ItemGroup>

    <Message Text="Excluding @(_TestCopyLocalFileNamesToRemove) from package references since the same file is provided by a project refrence."
             Condition="'@(_TestCopyLocalFileNamesToRemove)' != ''"/>

    <ItemGroup>
      <TestCopyLocal Include="@(RunTestsForProjectInputs)" Exclude="@(PackagesConfigs)" />
    </ItemGroup>
    
    <!-- Test using locally built libraries -->
    <ItemGroup Condition="'$(TestWithLocalLibraries)'=='true'">
      <!-- Replace some of the resolved libraries that came from nuget by exploring the list of files that we are going to copy
           and replacing them with local copies that were just built -->
      <_ReplacementCandidates Include="@(TestCopyLocal -> '$(BaseOutputPath)$(OSPlatformConfig)\%(filename)\%(filename).dll')" />
      <_ReplacementCandidates Include="@(TestCopyLocal -> '$(BaseOutputPath)$(OSPlatformConfig)\%(filename)\%(filename).pdb')" />
      <_ExistingReplacementCandidate Include="@(_ReplacementCandidates)" Condition="Exists('%(_ReplacementCandidates.FullPath)')" />
      
      <!-- Convert to filenames so that we can intersect -->
      <_ReplacementFilenames Include="@(_ExistingReplacementCandidate->'%(FileName)%(Extension)')">
        <OriginalIdentity>%(Identity)</OriginalIdentity>
      </_ReplacementFilenames>
      
      <_TestCopyLocalFileNamesToRemove Include="@(_ReplacementFilenames->'%(OriginalIdentity)')" Condition="'@(_ReplacementFilenames)' == '@(_TestCopyLocalFileNames)' and '%(Identity)' != ''"/>
      
      <TestCopyLocal Remove="@(_TestCopyLocalFileNamesToRemove)" />
      
      <TestCopyLocal Include="@(_ExistingReplacementCandidate)" />
    </ItemGroup>

    <Copy
      SourceFiles="@(TestCopyLocal)"
      DestinationFolder="$(TestPath)%(TestTargetFramework.Folder)"
      SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
      Retries="$(CopyRetryCount)"
      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
      UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)">
      
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
    </Copy>
      
  </Target>

</Project>